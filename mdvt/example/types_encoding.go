// Code generated by fastssz. DO NOT EDIT.
// Hash: 535e784e2fdb080aaf335be7761d22629d76fa0be36a0b5ea297bb11f8b31814
// Version: 0.1.2
package example

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Instance object
func (i *Instance) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the Instance object to a target array
func (i *Instance) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Slot'
	dst = ssz.MarshalUint64(dst, i.Slot)

	// Field (1) 'ClusterID'
	dst = ssz.MarshalUint64(dst, i.ClusterID)

	return
}

// UnmarshalSSZ ssz unmarshals the Instance object
func (i *Instance) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 16 {
		return ssz.ErrSize
	}

	// Field (0) 'Slot'
	i.Slot = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'ClusterID'
	i.ClusterID = ssz.UnmarshallUint64(buf[8:16])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Instance object
func (i *Instance) SizeSSZ() (size int) {
	size = 16
	return
}

// HashTreeRoot ssz hashes the Instance object
func (i *Instance) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(i)
}

// HashTreeRootWith ssz hashes the Instance object with a hasher
func (i *Instance) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Slot'
	hh.PutUint64(i.Slot)

	// Field (1) 'ClusterID'
	hh.PutUint64(i.ClusterID)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Instance object
func (i *Instance) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(i)
}
