// Code generated by fastssz. DO NOT EDIT.
// Hash: c0d4f560631a0157838a3e891868536ba87197ae221e5dc3e8dfe2cf7c3357bc
// Version: 0.1.2
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Transaction object
func (t *Transaction) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the Transaction object to a target array
func (t *Transaction) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(12)

	// Offset (0) 'Address'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.Address)

	// Field (1) 'Type'
	dst = append(dst, t.Type[:]...)

	// Offset (2) 'OperationData'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.OperationData)

	// Field (0) 'Address'
	if size := len(t.Address); size > 128 {
		err = ssz.ErrBytesLengthFn("Transaction.Address", size, 128)
		return
	}
	dst = append(dst, t.Address...)

	// Field (2) 'OperationData'
	if size := len(t.OperationData); size > 2048 {
		err = ssz.ErrBytesLengthFn("Transaction.OperationData", size, 2048)
		return
	}
	dst = append(dst, t.OperationData...)

	return
}

// UnmarshalSSZ ssz unmarshals the Transaction object
func (t *Transaction) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 12 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o2 uint64

	// Offset (0) 'Address'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 12 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Type'
	copy(t.Type[:], buf[4:8])

	// Offset (2) 'OperationData'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o0 > o2 {
		return ssz.ErrOffset
	}

	// Field (0) 'Address'
	{
		buf = tail[o0:o2]
		if len(buf) > 128 {
			return ssz.ErrBytesLength
		}
		if cap(t.Address) == 0 {
			t.Address = make([]byte, 0, len(buf))
		}
		t.Address = append(t.Address, buf...)
	}

	// Field (2) 'OperationData'
	{
		buf = tail[o2:]
		if len(buf) > 2048 {
			return ssz.ErrBytesLength
		}
		if cap(t.OperationData) == 0 {
			t.OperationData = make([]byte, 0, len(buf))
		}
		t.OperationData = append(t.OperationData, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Transaction object
func (t *Transaction) SizeSSZ() (size int) {
	size = 12

	// Field (0) 'Address'
	size += len(t.Address)

	// Field (2) 'OperationData'
	size += len(t.OperationData)

	return
}

// HashTreeRoot ssz hashes the Transaction object
func (t *Transaction) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(t)
}

// HashTreeRootWith ssz hashes the Transaction object with a hasher
func (t *Transaction) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Address'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(t.Address))
		if byteLen > 128 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(t.Address)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (128+31)/32)
	}

	// Field (1) 'Type'
	hh.PutBytes(t.Type[:])

	// Field (2) 'OperationData'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(t.OperationData))
		if byteLen > 2048 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(t.OperationData)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (2048+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Transaction object
func (t *Transaction) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(t)
}

// MarshalSSZ ssz marshals the SignedTransaction object
func (s *SignedTransaction) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedTransaction object to a target array
func (s *SignedTransaction) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(1028)

	// Field (0) 'Signature'
	if size := len(s.Signature); size != 1024 {
		err = ssz.ErrBytesLengthFn("SignedTransaction.Signature", size, 1024)
		return
	}
	dst = append(dst, s.Signature...)

	// Offset (1) 'Transaction'
	dst = ssz.WriteOffset(dst, offset)
	offset += s.Transaction.SizeSSZ()

	// Field (1) 'Transaction'
	if dst, err = s.Transaction.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SignedTransaction object
func (s *SignedTransaction) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 1028 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Signature'
	if cap(s.Signature) == 0 {
		s.Signature = make([]byte, 0, len(buf[0:1024]))
	}
	s.Signature = append(s.Signature, buf[0:1024]...)

	// Offset (1) 'Transaction'
	if o1 = ssz.ReadOffset(buf[1024:1028]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 1028 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Transaction'
	{
		buf = tail[o1:]
		if err = s.Transaction.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedTransaction object
func (s *SignedTransaction) SizeSSZ() (size int) {
	size = 1028

	// Field (1) 'Transaction'
	size += s.Transaction.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the SignedTransaction object
func (s *SignedTransaction) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedTransaction object with a hasher
func (s *SignedTransaction) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Signature'
	if size := len(s.Signature); size != 1024 {
		err = ssz.ErrBytesLengthFn("SignedTransaction.Signature", size, 1024)
		return
	}
	hh.PutBytes(s.Signature)

	// Field (1) 'Transaction'
	if err = s.Transaction.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SignedTransaction object
func (s *SignedTransaction) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
