// Code generated by fastssz. DO NOT EDIT.
// Hash: a3533cfe09ea2f906382a29f9b231399e76b99b3ca891a4adf821bd0a8ad4096
// Version: 0.1.2
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Operation object
func (o *Operation) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(o)
}

// MarshalSSZTo ssz marshals the Operation object to a target array
func (o *Operation) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(8)

	// Field (0) 'Type'
	dst = append(dst, o.Type[:]...)

	// Offset (1) 'OperationData'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(o.OperationData)

	// Field (1) 'OperationData'
	if size := len(o.OperationData); size > 2048 {
		err = ssz.ErrBytesLengthFn("Operation.OperationData", size, 2048)
		return
	}
	dst = append(dst, o.OperationData...)

	return
}

// UnmarshalSSZ ssz unmarshals the Operation object
func (o *Operation) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Type'
	copy(o.Type[:], buf[0:4])

	// Offset (1) 'OperationData'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 8 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'OperationData'
	{
		buf = tail[o1:]
		if len(buf) > 2048 {
			return ssz.ErrBytesLength
		}
		if cap(o.OperationData) == 0 {
			o.OperationData = make([]byte, 0, len(buf))
		}
		o.OperationData = append(o.OperationData, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Operation object
func (o *Operation) SizeSSZ() (size int) {
	size = 8

	// Field (1) 'OperationData'
	size += len(o.OperationData)

	return
}

// HashTreeRoot ssz hashes the Operation object
func (o *Operation) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(o)
}

// HashTreeRootWith ssz hashes the Operation object with a hasher
func (o *Operation) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Type'
	hh.PutBytes(o.Type[:])

	// Field (1) 'OperationData'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(o.OperationData))
		if byteLen > 2048 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(o.OperationData)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (2048+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Operation object
func (o *Operation) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(o)
}

// MarshalSSZ ssz marshals the Transaction object
func (t *Transaction) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the Transaction object to a target array
func (t *Transaction) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(32)

	// Offset (0) 'Address'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(t.Address)

	// Field (1) 'Nonce'
	dst = ssz.MarshalUint64(dst, t.Nonce)

	// Field (2) 'MaxGas'
	dst = ssz.MarshalUint64(dst, t.MaxGas)

	// Field (3) 'GasPrice'
	dst = ssz.MarshalUint64(dst, t.GasPrice)

	// Offset (4) 'Operations'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(t.Operations); ii++ {
		offset += 4
		offset += t.Operations[ii].SizeSSZ()
	}

	// Field (0) 'Address'
	if size := len(t.Address); size > 128 {
		err = ssz.ErrBytesLengthFn("Transaction.Address", size, 128)
		return
	}
	dst = append(dst, t.Address...)

	// Field (4) 'Operations'
	if size := len(t.Operations); size > 128 {
		err = ssz.ErrListTooBigFn("Transaction.Operations", size, 128)
		return
	}
	{
		offset = 4 * len(t.Operations)
		for ii := 0; ii < len(t.Operations); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += t.Operations[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(t.Operations); ii++ {
		if dst, err = t.Operations[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Transaction object
func (t *Transaction) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 32 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o4 uint64

	// Offset (0) 'Address'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 32 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Nonce'
	t.Nonce = ssz.UnmarshallUint64(buf[4:12])

	// Field (2) 'MaxGas'
	t.MaxGas = ssz.UnmarshallUint64(buf[12:20])

	// Field (3) 'GasPrice'
	t.GasPrice = ssz.UnmarshallUint64(buf[20:28])

	// Offset (4) 'Operations'
	if o4 = ssz.ReadOffset(buf[28:32]); o4 > size || o0 > o4 {
		return ssz.ErrOffset
	}

	// Field (0) 'Address'
	{
		buf = tail[o0:o4]
		if len(buf) > 128 {
			return ssz.ErrBytesLength
		}
		if cap(t.Address) == 0 {
			t.Address = make([]byte, 0, len(buf))
		}
		t.Address = append(t.Address, buf...)
	}

	// Field (4) 'Operations'
	{
		buf = tail[o4:]
		num, err := ssz.DecodeDynamicLength(buf, 128)
		if err != nil {
			return err
		}
		t.Operations = make([]*Operation, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if t.Operations[indx] == nil {
				t.Operations[indx] = new(Operation)
			}
			if err = t.Operations[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Transaction object
func (t *Transaction) SizeSSZ() (size int) {
	size = 32

	// Field (0) 'Address'
	size += len(t.Address)

	// Field (4) 'Operations'
	for ii := 0; ii < len(t.Operations); ii++ {
		size += 4
		size += t.Operations[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the Transaction object
func (t *Transaction) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(t)
}

// HashTreeRootWith ssz hashes the Transaction object with a hasher
func (t *Transaction) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Address'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(t.Address))
		if byteLen > 128 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(t.Address)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (128+31)/32)
	}

	// Field (1) 'Nonce'
	hh.PutUint64(t.Nonce)

	// Field (2) 'MaxGas'
	hh.PutUint64(t.MaxGas)

	// Field (3) 'GasPrice'
	hh.PutUint64(t.GasPrice)

	// Field (4) 'Operations'
	{
		subIndx := hh.Index()
		num := uint64(len(t.Operations))
		if num > 128 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range t.Operations {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 128)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Transaction object
func (t *Transaction) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(t)
}

// MarshalSSZ ssz marshals the SignedTransaction object
func (s *SignedTransaction) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(s)
}

// MarshalSSZTo ssz marshals the SignedTransaction object to a target array
func (s *SignedTransaction) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(1028)

	// Field (0) 'Signature'
	if size := len(s.Signature); size != 1024 {
		err = ssz.ErrBytesLengthFn("SignedTransaction.Signature", size, 1024)
		return
	}
	dst = append(dst, s.Signature...)

	// Offset (1) 'Transaction'
	dst = ssz.WriteOffset(dst, offset)
	offset += s.Transaction.SizeSSZ()

	// Field (1) 'Transaction'
	if dst, err = s.Transaction.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the SignedTransaction object
func (s *SignedTransaction) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 1028 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Signature'
	if cap(s.Signature) == 0 {
		s.Signature = make([]byte, 0, len(buf[0:1024]))
	}
	s.Signature = append(s.Signature, buf[0:1024]...)

	// Offset (1) 'Transaction'
	if o1 = ssz.ReadOffset(buf[1024:1028]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 1028 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Transaction'
	{
		buf = tail[o1:]
		if err = s.Transaction.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the SignedTransaction object
func (s *SignedTransaction) SizeSSZ() (size int) {
	size = 1028

	// Field (1) 'Transaction'
	size += s.Transaction.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the SignedTransaction object
func (s *SignedTransaction) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(s)
}

// HashTreeRootWith ssz hashes the SignedTransaction object with a hasher
func (s *SignedTransaction) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Signature'
	if size := len(s.Signature); size != 1024 {
		err = ssz.ErrBytesLengthFn("SignedTransaction.Signature", size, 1024)
		return
	}
	hh.PutBytes(s.Signature)

	// Field (1) 'Transaction'
	if err = s.Transaction.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the SignedTransaction object
func (s *SignedTransaction) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(s)
}
