// Code generated by fastssz. DO NOT EDIT.
// Hash: 98d16a58faca61fc0302ecac31d6f49834f349faa0195ff9985f55de90459ae8
// Version: 0.1.2
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Account object
func (a *Account) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the Account object to a target array
func (a *Account) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(20)

	// Field (0) 'Network'
	dst = append(dst, a.Network[:]...)

	// Offset (1) 'Address'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(a.Address)

	// Field (2) 'Nonce'
	dst = ssz.MarshalUint64(dst, a.Nonce)

	// Offset (3) 'Balances'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(a.Balances); ii++ {
		offset += 4
		offset += a.Balances[ii].SizeSSZ()
	}

	// Field (1) 'Address'
	if size := len(a.Address); size > 128 {
		err = ssz.ErrBytesLengthFn("Account.Address", size, 128)
		return
	}
	dst = append(dst, a.Address...)

	// Field (3) 'Balances'
	if size := len(a.Balances); size > 128 {
		err = ssz.ErrListTooBigFn("Account.Balances", size, 128)
		return
	}
	{
		offset = 4 * len(a.Balances)
		for ii := 0; ii < len(a.Balances); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += a.Balances[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(a.Balances); ii++ {
		if dst, err = a.Balances[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Account object
func (a *Account) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 20 {
		return ssz.ErrSize
	}

	tail := buf
	var o1, o3 uint64

	// Field (0) 'Network'
	copy(a.Network[:], buf[0:4])

	// Offset (1) 'Address'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 20 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (2) 'Nonce'
	a.Nonce = ssz.UnmarshallUint64(buf[8:16])

	// Offset (3) 'Balances'
	if o3 = ssz.ReadOffset(buf[16:20]); o3 > size || o1 > o3 {
		return ssz.ErrOffset
	}

	// Field (1) 'Address'
	{
		buf = tail[o1:o3]
		if len(buf) > 128 {
			return ssz.ErrBytesLength
		}
		if cap(a.Address) == 0 {
			a.Address = make([]byte, 0, len(buf))
		}
		a.Address = append(a.Address, buf...)
	}

	// Field (3) 'Balances'
	{
		buf = tail[o3:]
		num, err := ssz.DecodeDynamicLength(buf, 128)
		if err != nil {
			return err
		}
		a.Balances = make([]*Balance, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if a.Balances[indx] == nil {
				a.Balances[indx] = new(Balance)
			}
			if err = a.Balances[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Account object
func (a *Account) SizeSSZ() (size int) {
	size = 20

	// Field (1) 'Address'
	size += len(a.Address)

	// Field (3) 'Balances'
	for ii := 0; ii < len(a.Balances); ii++ {
		size += 4
		size += a.Balances[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the Account object
func (a *Account) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the Account object with a hasher
func (a *Account) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Network'
	hh.PutBytes(a.Network[:])

	// Field (1) 'Address'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(a.Address))
		if byteLen > 128 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(a.Address)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (128+31)/32)
	}

	// Field (2) 'Nonce'
	hh.PutUint64(a.Nonce)

	// Field (3) 'Balances'
	{
		subIndx := hh.Index()
		num := uint64(len(a.Balances))
		if num > 128 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range a.Balances {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 128)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Account object
func (a *Account) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(a)
}
