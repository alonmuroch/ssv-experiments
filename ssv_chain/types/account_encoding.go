// Code generated by fastssz. DO NOT EDIT.
// Hash: 3dfd1196b72b8271e32db00094cb6f3358d41f25d50a29e8e706f7df063eab99
// Version: 0.1.2
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Account object
func (a *Account) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the Account object to a target array
func (a *Account) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(28)

	// Offset (0) 'Address'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(a.Address)

	// Field (1) 'Nonce'
	dst = ssz.MarshalUint64(dst, a.Nonce)

	// Field (2) 'Balance'
	dst = ssz.MarshalUint64(dst, a.Balance)

	// Field (3) 'Withdrawable'
	dst = ssz.MarshalUint64(dst, a.Withdrawable)

	// Field (0) 'Address'
	if size := len(a.Address); size > 128 {
		err = ssz.ErrBytesLengthFn("Account.Address", size, 128)
		return
	}
	dst = append(dst, a.Address...)

	return
}

// UnmarshalSSZ ssz unmarshals the Account object
func (a *Account) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 28 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Address'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 28 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Nonce'
	a.Nonce = ssz.UnmarshallUint64(buf[4:12])

	// Field (2) 'Balance'
	a.Balance = ssz.UnmarshallUint64(buf[12:20])

	// Field (3) 'Withdrawable'
	a.Withdrawable = ssz.UnmarshallUint64(buf[20:28])

	// Field (0) 'Address'
	{
		buf = tail[o0:]
		if len(buf) > 128 {
			return ssz.ErrBytesLength
		}
		if cap(a.Address) == 0 {
			a.Address = make([]byte, 0, len(buf))
		}
		a.Address = append(a.Address, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Account object
func (a *Account) SizeSSZ() (size int) {
	size = 28

	// Field (0) 'Address'
	size += len(a.Address)

	return
}

// HashTreeRoot ssz hashes the Account object
func (a *Account) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the Account object with a hasher
func (a *Account) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Address'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(a.Address))
		if byteLen > 128 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(a.Address)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (128+31)/32)
	}

	// Field (1) 'Nonce'
	hh.PutUint64(a.Nonce)

	// Field (2) 'Balance'
	hh.PutUint64(a.Balance)

	// Field (3) 'Withdrawable'
	hh.PutUint64(a.Withdrawable)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Account object
func (a *Account) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(a)
}
