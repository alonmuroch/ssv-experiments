// Code generated by fastssz. DO NOT EDIT.
// Hash: 7011f9959202c1e505dd94f195954248227524c92502db5c7169e9c19fd6eb3a
// Version: 0.1.2
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Module object
func (m *Module) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(m)
}

// MarshalSSZTo ssz marshals the Module object to a target array
func (m *Module) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(20)

	// Field (0) 'Network'
	dst = append(dst, m.Network[:]...)

	// Offset (1) 'Address'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.Address)

	// Field (2) 'ID'
	dst = ssz.MarshalUint64(dst, m.ID)

	// Offset (3) 'Name'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(m.Name)

	// Field (1) 'Address'
	if size := len(m.Address); size > 128 {
		err = ssz.ErrBytesLengthFn("Module.Address", size, 128)
		return
	}
	dst = append(dst, m.Address...)

	// Field (3) 'Name'
	if size := len(m.Name); size > 1024 {
		err = ssz.ErrBytesLengthFn("Module.Name", size, 1024)
		return
	}
	dst = append(dst, m.Name...)

	return
}

// UnmarshalSSZ ssz unmarshals the Module object
func (m *Module) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 20 {
		return ssz.ErrSize
	}

	tail := buf
	var o1, o3 uint64

	// Field (0) 'Network'
	copy(m.Network[:], buf[0:4])

	// Offset (1) 'Address'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 20 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (2) 'ID'
	m.ID = ssz.UnmarshallUint64(buf[8:16])

	// Offset (3) 'Name'
	if o3 = ssz.ReadOffset(buf[16:20]); o3 > size || o1 > o3 {
		return ssz.ErrOffset
	}

	// Field (1) 'Address'
	{
		buf = tail[o1:o3]
		if len(buf) > 128 {
			return ssz.ErrBytesLength
		}
		if cap(m.Address) == 0 {
			m.Address = make([]byte, 0, len(buf))
		}
		m.Address = append(m.Address, buf...)
	}

	// Field (3) 'Name'
	{
		buf = tail[o3:]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(m.Name) == 0 {
			m.Name = make([]byte, 0, len(buf))
		}
		m.Name = append(m.Name, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Module object
func (m *Module) SizeSSZ() (size int) {
	size = 20

	// Field (1) 'Address'
	size += len(m.Address)

	// Field (3) 'Name'
	size += len(m.Name)

	return
}

// HashTreeRoot ssz hashes the Module object
func (m *Module) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(m)
}

// HashTreeRootWith ssz hashes the Module object with a hasher
func (m *Module) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Network'
	hh.PutBytes(m.Network[:])

	// Field (1) 'Address'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(m.Address))
		if byteLen > 128 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(m.Address)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (128+31)/32)
	}

	// Field (2) 'ID'
	hh.PutUint64(m.ID)

	// Field (3) 'Name'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(m.Name))
		if byteLen > 1024 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(m.Name)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (1024+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Module object
func (m *Module) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(m)
}
