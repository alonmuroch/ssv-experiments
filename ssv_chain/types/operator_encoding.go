// Code generated by fastssz. DO NOT EDIT.
// Hash: 886b8af940d543152d4440591458ed4a2b918fa1f73fa662f666490a99bd0b45
// Version: 0.1.2
package types

import (
	ssz "github.com/ferranbt/fastssz"
	"ssv-experiments/ssv_chain/common"
)

// MarshalSSZ ssz marshals the Operator object
func (o *Operator) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(o)
}

// MarshalSSZTo ssz marshals the Operator object to a target array
func (o *Operator) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(24)

	// Field (0) 'Account'
	dst = ssz.MarshalUint64(dst, o.Account)

	// Field (1) 'ID'
	dst = ssz.MarshalUint64(dst, o.ID)

	// Offset (2) 'PublicKey'
	dst = ssz.WriteOffset(dst, offset)
	if o.PublicKey == nil {
		o.PublicKey = new(common.CryptoKey)
	}
	offset += o.PublicKey.SizeSSZ()

	// Offset (3) 'Modules'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(o.Modules) * 8

	// Field (2) 'PublicKey'
	if dst, err = o.PublicKey.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (3) 'Modules'
	if size := len(o.Modules); size > 16 {
		err = ssz.ErrListTooBigFn("Operator.Modules", size, 16)
		return
	}
	for ii := 0; ii < len(o.Modules); ii++ {
		dst = ssz.MarshalUint64(dst, o.Modules[ii])
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Operator object
func (o *Operator) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 24 {
		return ssz.ErrSize
	}

	tail := buf
	var o2, o3 uint64

	// Field (0) 'Account'
	o.Account = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'ID'
	o.ID = ssz.UnmarshallUint64(buf[8:16])

	// Offset (2) 'PublicKey'
	if o2 = ssz.ReadOffset(buf[16:20]); o2 > size {
		return ssz.ErrOffset
	}

	if o2 < 24 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (3) 'Modules'
	if o3 = ssz.ReadOffset(buf[20:24]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Field (2) 'PublicKey'
	{
		buf = tail[o2:o3]
		if o.PublicKey == nil {
			o.PublicKey = new(common.CryptoKey)
		}
		if err = o.PublicKey.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (3) 'Modules'
	{
		buf = tail[o3:]
		num, err := ssz.DivideInt2(len(buf), 8, 16)
		if err != nil {
			return err
		}
		o.Modules = ssz.ExtendUint64(o.Modules, num)
		for ii := 0; ii < num; ii++ {
			o.Modules[ii] = ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8])
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Operator object
func (o *Operator) SizeSSZ() (size int) {
	size = 24

	// Field (2) 'PublicKey'
	if o.PublicKey == nil {
		o.PublicKey = new(common.CryptoKey)
	}
	size += o.PublicKey.SizeSSZ()

	// Field (3) 'Modules'
	size += len(o.Modules) * 8

	return
}

// HashTreeRoot ssz hashes the Operator object
func (o *Operator) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(o)
}

// HashTreeRootWith ssz hashes the Operator object with a hasher
func (o *Operator) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Account'
	hh.PutUint64(o.Account)

	// Field (1) 'ID'
	hh.PutUint64(o.ID)

	// Field (2) 'PublicKey'
	if err = o.PublicKey.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (3) 'Modules'
	{
		if size := len(o.Modules); size > 16 {
			err = ssz.ErrListTooBigFn("Operator.Modules", size, 16)
			return
		}
		subIndx := hh.Index()
		for _, i := range o.Modules {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(o.Modules))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(16, numItems, 8))
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Operator object
func (o *Operator) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(o)
}
