// Code generated by fastssz. DO NOT EDIT.
// Hash: 3f7b0f5b3a1993040c03bfb9c751a61f34a65cb51d581c1b036597de677557bb
// Version: 0.1.2
package types

import (
	ssz "github.com/ferranbt/fastssz"
	"ssv-experiments/ssv_chain/common"
)

// MarshalSSZ ssz marshals the Validator object
func (v *Validator) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the Validator object to a target array
func (v *Validator) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(20)

	// Field (0) 'Account'
	dst = ssz.MarshalUint64(dst, v.Account)

	// Field (1) 'VotingPower'
	dst = ssz.MarshalUint64(dst, v.VotingPower)

	// Offset (2) 'PublicKey'
	dst = ssz.WriteOffset(dst, offset)
	if v.PublicKey == nil {
		v.PublicKey = new(common.CryptoKey)
	}
	offset += v.PublicKey.SizeSSZ()

	// Field (2) 'PublicKey'
	if dst, err = v.PublicKey.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Validator object
func (v *Validator) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 20 {
		return ssz.ErrSize
	}

	tail := buf
	var o2 uint64

	// Field (0) 'Account'
	v.Account = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'VotingPower'
	v.VotingPower = ssz.UnmarshallUint64(buf[8:16])

	// Offset (2) 'PublicKey'
	if o2 = ssz.ReadOffset(buf[16:20]); o2 > size {
		return ssz.ErrOffset
	}

	if o2 < 20 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (2) 'PublicKey'
	{
		buf = tail[o2:]
		if v.PublicKey == nil {
			v.PublicKey = new(common.CryptoKey)
		}
		if err = v.PublicKey.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Validator object
func (v *Validator) SizeSSZ() (size int) {
	size = 20

	// Field (2) 'PublicKey'
	if v.PublicKey == nil {
		v.PublicKey = new(common.CryptoKey)
	}
	size += v.PublicKey.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the Validator object
func (v *Validator) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the Validator object with a hasher
func (v *Validator) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Account'
	hh.PutUint64(v.Account)

	// Field (1) 'VotingPower'
	hh.PutUint64(v.VotingPower)

	// Field (2) 'PublicKey'
	if err = v.PublicKey.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Validator object
func (v *Validator) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(v)
}
