// Code generated by fastssz. DO NOT EDIT.
// Hash: 0c78454d2655d42249e924ddde35d840af619a18c00fd0acafd85b22e7c74d5f
// Version: 0.1.2
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Configure object
func (c *Configure) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the Configure object to a target array
func (c *Configure) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(8)

	// Offset (0) 'SupportedNetworks'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(c.SupportedNetworks); ii++ {
		offset += 4
		offset += len(c.SupportedNetworks[ii])
	}

	// Offset (1) 'SSVTokenAddressByNetwork'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(c.SSVTokenAddressByNetwork); ii++ {
		offset += 4
		offset += len(c.SSVTokenAddressByNetwork[ii])
	}

	// Field (0) 'SupportedNetworks'
	if size := len(c.SupportedNetworks); size > 12 {
		err = ssz.ErrListTooBigFn("Configure.SupportedNetworks", size, 12)
		return
	}
	{
		offset = 4 * len(c.SupportedNetworks)
		for ii := 0; ii < len(c.SupportedNetworks); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(c.SupportedNetworks[ii])
		}
	}
	for ii := 0; ii < len(c.SupportedNetworks); ii++ {
		if size := len(c.SupportedNetworks[ii]); size > 4 {
			err = ssz.ErrBytesLengthFn("Configure.SupportedNetworks[ii]", size, 4)
			return
		}
		dst = append(dst, c.SupportedNetworks[ii]...)
	}

	// Field (1) 'SSVTokenAddressByNetwork'
	if size := len(c.SSVTokenAddressByNetwork); size > 12 {
		err = ssz.ErrListTooBigFn("Configure.SSVTokenAddressByNetwork", size, 12)
		return
	}
	{
		offset = 4 * len(c.SSVTokenAddressByNetwork)
		for ii := 0; ii < len(c.SSVTokenAddressByNetwork); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(c.SSVTokenAddressByNetwork[ii])
		}
	}
	for ii := 0; ii < len(c.SSVTokenAddressByNetwork); ii++ {
		if size := len(c.SSVTokenAddressByNetwork[ii]); size > 128 {
			err = ssz.ErrBytesLengthFn("Configure.SSVTokenAddressByNetwork[ii]", size, 128)
			return
		}
		dst = append(dst, c.SSVTokenAddressByNetwork[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Configure object
func (c *Configure) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1 uint64

	// Offset (0) 'SupportedNetworks'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 8 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'SSVTokenAddressByNetwork'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (0) 'SupportedNetworks'
	{
		buf = tail[o0:o1]
		num, err := ssz.DecodeDynamicLength(buf, 12)
		if err != nil {
			return err
		}
		c.SupportedNetworks = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 4 {
				return ssz.ErrBytesLength
			}
			if cap(c.SupportedNetworks[indx]) == 0 {
				c.SupportedNetworks[indx] = make([]byte, 0, len(buf))
			}
			c.SupportedNetworks[indx] = append(c.SupportedNetworks[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (1) 'SSVTokenAddressByNetwork'
	{
		buf = tail[o1:]
		num, err := ssz.DecodeDynamicLength(buf, 12)
		if err != nil {
			return err
		}
		c.SSVTokenAddressByNetwork = make([][]byte, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if len(buf) > 128 {
				return ssz.ErrBytesLength
			}
			if cap(c.SSVTokenAddressByNetwork[indx]) == 0 {
				c.SSVTokenAddressByNetwork[indx] = make([]byte, 0, len(buf))
			}
			c.SSVTokenAddressByNetwork[indx] = append(c.SSVTokenAddressByNetwork[indx], buf...)
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Configure object
func (c *Configure) SizeSSZ() (size int) {
	size = 8

	// Field (0) 'SupportedNetworks'
	for ii := 0; ii < len(c.SupportedNetworks); ii++ {
		size += 4
		size += len(c.SupportedNetworks[ii])
	}

	// Field (1) 'SSVTokenAddressByNetwork'
	for ii := 0; ii < len(c.SSVTokenAddressByNetwork); ii++ {
		size += 4
		size += len(c.SSVTokenAddressByNetwork[ii])
	}

	return
}

// HashTreeRoot ssz hashes the Configure object
func (c *Configure) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the Configure object with a hasher
func (c *Configure) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'SupportedNetworks'
	{
		subIndx := hh.Index()
		num := uint64(len(c.SupportedNetworks))
		if num > 12 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range c.SupportedNetworks {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 4 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (4+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 12)
	}

	// Field (1) 'SSVTokenAddressByNetwork'
	{
		subIndx := hh.Index()
		num := uint64(len(c.SSVTokenAddressByNetwork))
		if num > 12 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range c.SSVTokenAddressByNetwork {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 128 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (128+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 12)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Configure object
func (c *Configure) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}
