// Code generated by fastssz. DO NOT EDIT.
// Hash: 06bf5ee15597cec8db7f96ecc0e8ec7253131a865f00358363d29818717b05a7
// Version: 0.1.2
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Balance object
func (b *Balance) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the Balance object to a target array
func (b *Balance) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(32)

	// Field (0) 'Network'
	dst = append(dst, b.Network[:]...)

	// Offset (1) 'TokenAddress'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.TokenAddress)

	// Field (2) 'Amount'
	dst = ssz.MarshalUint64(dst, b.Amount)

	// Field (3) 'Locked'
	dst = ssz.MarshalUint64(dst, b.Locked)

	// Field (4) 'Delegated'
	dst = ssz.MarshalUint64(dst, b.Delegated)

	// Field (1) 'TokenAddress'
	if size := len(b.TokenAddress); size > 128 {
		err = ssz.ErrBytesLengthFn("Balance.TokenAddress", size, 128)
		return
	}
	dst = append(dst, b.TokenAddress...)

	return
}

// UnmarshalSSZ ssz unmarshals the Balance object
func (b *Balance) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 32 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Network'
	copy(b.Network[:], buf[0:4])

	// Offset (1) 'TokenAddress'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 32 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (2) 'Amount'
	b.Amount = ssz.UnmarshallUint64(buf[8:16])

	// Field (3) 'Locked'
	b.Locked = ssz.UnmarshallUint64(buf[16:24])

	// Field (4) 'Delegated'
	b.Delegated = ssz.UnmarshallUint64(buf[24:32])

	// Field (1) 'TokenAddress'
	{
		buf = tail[o1:]
		if len(buf) > 128 {
			return ssz.ErrBytesLength
		}
		if cap(b.TokenAddress) == 0 {
			b.TokenAddress = make([]byte, 0, len(buf))
		}
		b.TokenAddress = append(b.TokenAddress, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Balance object
func (b *Balance) SizeSSZ() (size int) {
	size = 32

	// Field (1) 'TokenAddress'
	size += len(b.TokenAddress)

	return
}

// HashTreeRoot ssz hashes the Balance object
func (b *Balance) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the Balance object with a hasher
func (b *Balance) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Network'
	hh.PutBytes(b.Network[:])

	// Field (1) 'TokenAddress'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(b.TokenAddress))
		if byteLen > 128 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(b.TokenAddress)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (128+31)/32)
	}

	// Field (2) 'Amount'
	hh.PutUint64(b.Amount)

	// Field (3) 'Locked'
	hh.PutUint64(b.Locked)

	// Field (4) 'Delegated'
	hh.PutUint64(b.Delegated)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Balance object
func (b *Balance) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}
