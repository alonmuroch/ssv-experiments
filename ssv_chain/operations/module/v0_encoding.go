// Code generated by fastssz. DO NOT EDIT.
// Hash: a8d854252e64545f96e45e8812ed62c7976228ee7fde12156f839042b6d83c69
// Version: 0.1.2
package module

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the addModuleV0 object
func (a *addModuleV0) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the addModuleV0 object to a target array
func (a *addModuleV0) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(8)

	// Offset (0) 'Name'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(a.Name)

	// Field (1) 'Network'
	dst = append(dst, a.Network[:]...)

	// Field (0) 'Name'
	if size := len(a.Name); size > 1024 {
		err = ssz.ErrBytesLengthFn("addModuleV0.Name", size, 1024)
		return
	}
	dst = append(dst, a.Name...)

	return
}

// UnmarshalSSZ ssz unmarshals the addModuleV0 object
func (a *addModuleV0) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Name'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 8 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Network'
	copy(a.Network[:], buf[4:8])

	// Field (0) 'Name'
	{
		buf = tail[o0:]
		if len(buf) > 1024 {
			return ssz.ErrBytesLength
		}
		if cap(a.Name) == 0 {
			a.Name = make([]byte, 0, len(buf))
		}
		a.Name = append(a.Name, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the addModuleV0 object
func (a *addModuleV0) SizeSSZ() (size int) {
	size = 8

	// Field (0) 'Name'
	size += len(a.Name)

	return
}

// HashTreeRoot ssz hashes the addModuleV0 object
func (a *addModuleV0) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the addModuleV0 object with a hasher
func (a *addModuleV0) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Name'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(a.Name))
		if byteLen > 1024 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(a.Name)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (1024+31)/32)
	}

	// Field (1) 'Network'
	hh.PutBytes(a.Network[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the addModuleV0 object
func (a *addModuleV0) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(a)
}
