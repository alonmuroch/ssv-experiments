// Code generated by fastssz. DO NOT EDIT.
// Hash: 03031f4bc986a5a8012e9792c116a41eb3f275d4a21af94cc4a10495bd531711
// Version: 0.1.2
package account

import (
	ssz "github.com/ferranbt/fastssz"
	"ssv-experiments/ssv_chain/types"
)

// MarshalSSZ ssz marshals the depositBalanceV0 object
func (d *depositBalanceV0) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(d)
}

// MarshalSSZTo ssz marshals the depositBalanceV0 object to a target array
func (d *depositBalanceV0) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(8)

	// Offset (0) 'Address'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(d.Address)

	// Offset (1) 'Balances'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(d.Balances); ii++ {
		offset += 4
		offset += d.Balances[ii].SizeSSZ()
	}

	// Field (0) 'Address'
	if size := len(d.Address); size > 128 {
		err = ssz.ErrBytesLengthFn("depositBalanceV0.Address", size, 128)
		return
	}
	dst = append(dst, d.Address...)

	// Field (1) 'Balances'
	if size := len(d.Balances); size > 12 {
		err = ssz.ErrListTooBigFn("depositBalanceV0.Balances", size, 12)
		return
	}
	{
		offset = 4 * len(d.Balances)
		for ii := 0; ii < len(d.Balances); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += d.Balances[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(d.Balances); ii++ {
		if dst, err = d.Balances[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the depositBalanceV0 object
func (d *depositBalanceV0) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 8 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1 uint64

	// Offset (0) 'Address'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 8 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'Balances'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Field (0) 'Address'
	{
		buf = tail[o0:o1]
		if len(buf) > 128 {
			return ssz.ErrBytesLength
		}
		if cap(d.Address) == 0 {
			d.Address = make([]byte, 0, len(buf))
		}
		d.Address = append(d.Address, buf...)
	}

	// Field (1) 'Balances'
	{
		buf = tail[o1:]
		num, err := ssz.DecodeDynamicLength(buf, 12)
		if err != nil {
			return err
		}
		d.Balances = make([]*types.Balance, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if d.Balances[indx] == nil {
				d.Balances[indx] = new(types.Balance)
			}
			if err = d.Balances[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the depositBalanceV0 object
func (d *depositBalanceV0) SizeSSZ() (size int) {
	size = 8

	// Field (0) 'Address'
	size += len(d.Address)

	// Field (1) 'Balances'
	for ii := 0; ii < len(d.Balances); ii++ {
		size += 4
		size += d.Balances[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the depositBalanceV0 object
func (d *depositBalanceV0) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(d)
}

// HashTreeRootWith ssz hashes the depositBalanceV0 object with a hasher
func (d *depositBalanceV0) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Address'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(d.Address))
		if byteLen > 128 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(d.Address)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (128+31)/32)
	}

	// Field (1) 'Balances'
	{
		subIndx := hh.Index()
		num := uint64(len(d.Balances))
		if num > 12 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range d.Balances {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 12)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the depositBalanceV0 object
func (d *depositBalanceV0) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(d)
}

// MarshalSSZ ssz marshals the withdrawBalanceV0 object
func (w *withdrawBalanceV0) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(w)
}

// MarshalSSZTo ssz marshals the withdrawBalanceV0 object to a target array
func (w *withdrawBalanceV0) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'Balances'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(w.Balances); ii++ {
		offset += 4
		offset += w.Balances[ii].SizeSSZ()
	}

	// Field (0) 'Balances'
	if size := len(w.Balances); size > 12 {
		err = ssz.ErrListTooBigFn("withdrawBalanceV0.Balances", size, 12)
		return
	}
	{
		offset = 4 * len(w.Balances)
		for ii := 0; ii < len(w.Balances); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += w.Balances[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(w.Balances); ii++ {
		if dst, err = w.Balances[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the withdrawBalanceV0 object
func (w *withdrawBalanceV0) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Balances'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'Balances'
	{
		buf = tail[o0:]
		num, err := ssz.DecodeDynamicLength(buf, 12)
		if err != nil {
			return err
		}
		w.Balances = make([]*types.Balance, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if w.Balances[indx] == nil {
				w.Balances[indx] = new(types.Balance)
			}
			if err = w.Balances[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the withdrawBalanceV0 object
func (w *withdrawBalanceV0) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'Balances'
	for ii := 0; ii < len(w.Balances); ii++ {
		size += 4
		size += w.Balances[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the withdrawBalanceV0 object
func (w *withdrawBalanceV0) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(w)
}

// HashTreeRootWith ssz hashes the withdrawBalanceV0 object with a hasher
func (w *withdrawBalanceV0) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Balances'
	{
		subIndx := hh.Index()
		num := uint64(len(w.Balances))
		if num > 12 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range w.Balances {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 12)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the withdrawBalanceV0 object
func (w *withdrawBalanceV0) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(w)
}
