// Code generated by fastssz. DO NOT EDIT.
// Hash: bc9992895b1524ac22dd8e5e4c1c512a6edffb47c97b17053fee8eb123f6b5d5
// Version: 0.1.2
package operator

import (
	ssz "github.com/ferranbt/fastssz"
	"ssv-experiments/ssv_chain/common"
)

// MarshalSSZ ssz marshals the addOperatorV0 object
func (a *addOperatorV0) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(a)
}

// MarshalSSZTo ssz marshals the addOperatorV0 object to a target array
func (a *addOperatorV0) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'PublicKey'
	dst = ssz.WriteOffset(dst, offset)
	if a.PublicKey == nil {
		a.PublicKey = new(common.CryptoKey)
	}
	offset += a.PublicKey.SizeSSZ()

	// Field (0) 'PublicKey'
	if dst, err = a.PublicKey.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the addOperatorV0 object
func (a *addOperatorV0) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'PublicKey'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'PublicKey'
	{
		buf = tail[o0:]
		if a.PublicKey == nil {
			a.PublicKey = new(common.CryptoKey)
		}
		if err = a.PublicKey.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the addOperatorV0 object
func (a *addOperatorV0) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'PublicKey'
	if a.PublicKey == nil {
		a.PublicKey = new(common.CryptoKey)
	}
	size += a.PublicKey.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the addOperatorV0 object
func (a *addOperatorV0) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(a)
}

// HashTreeRootWith ssz hashes the addOperatorV0 object with a hasher
func (a *addOperatorV0) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'PublicKey'
	if err = a.PublicKey.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the addOperatorV0 object
func (a *addOperatorV0) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(a)
}
