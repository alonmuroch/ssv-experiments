// Code generated by fastssz. DO NOT EDIT.
// Hash: ec142dcc67f162464f26556d12855b999ba673d6f6d1b0a2c7498675f2213ee2
// Version: 0.1.2
package stake

import (
	ssz "github.com/ferranbt/fastssz"
	"ssv-experiments/ssv_chain/types"
)

// MarshalSSZ ssz marshals the lockStakeV0 object
func (l *lockStakeV0) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(l)
}

// MarshalSSZTo ssz marshals the lockStakeV0 object to a target array
func (l *lockStakeV0) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'Amounts'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(l.Amounts); ii++ {
		offset += 4
		offset += l.Amounts[ii].SizeSSZ()
	}

	// Field (0) 'Amounts'
	if size := len(l.Amounts); size > 12 {
		err = ssz.ErrListTooBigFn("lockStakeV0.Amounts", size, 12)
		return
	}
	{
		offset = 4 * len(l.Amounts)
		for ii := 0; ii < len(l.Amounts); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += l.Amounts[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(l.Amounts); ii++ {
		if dst, err = l.Amounts[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the lockStakeV0 object
func (l *lockStakeV0) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'Amounts'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'Amounts'
	{
		buf = tail[o0:]
		num, err := ssz.DecodeDynamicLength(buf, 12)
		if err != nil {
			return err
		}
		l.Amounts = make([]*types.Balance, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if l.Amounts[indx] == nil {
				l.Amounts[indx] = new(types.Balance)
			}
			if err = l.Amounts[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the lockStakeV0 object
func (l *lockStakeV0) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'Amounts'
	for ii := 0; ii < len(l.Amounts); ii++ {
		size += 4
		size += l.Amounts[ii].SizeSSZ()
	}

	return
}

// HashTreeRoot ssz hashes the lockStakeV0 object
func (l *lockStakeV0) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(l)
}

// HashTreeRootWith ssz hashes the lockStakeV0 object with a hasher
func (l *lockStakeV0) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Amounts'
	{
		subIndx := hh.Index()
		num := uint64(len(l.Amounts))
		if num > 12 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range l.Amounts {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 12)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the lockStakeV0 object
func (l *lockStakeV0) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(l)
}
