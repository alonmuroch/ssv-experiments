// Code generated by fastssz. DO NOT EDIT.
// Hash: 38d134991fec55f177e4f0522df997eb6c4c8efd97941f352aa0b17dc10e32ef
// Version: 0.1.2
package stake

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the lockStakeV0 object
func (l *lockStakeV0) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(l)
}

// MarshalSSZTo ssz marshals the lockStakeV0 object to a target array
func (l *lockStakeV0) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	return
}

// UnmarshalSSZ ssz unmarshals the lockStakeV0 object
func (l *lockStakeV0) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 0 {
		return ssz.ErrSize
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the lockStakeV0 object
func (l *lockStakeV0) SizeSSZ() (size int) {
	size = 0
	return
}

// HashTreeRoot ssz hashes the lockStakeV0 object
func (l *lockStakeV0) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(l)
}

// HashTreeRootWith ssz hashes the lockStakeV0 object with a hasher
func (l *lockStakeV0) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the lockStakeV0 object
func (l *lockStakeV0) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(l)
}
